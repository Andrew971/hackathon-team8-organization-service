AWSTemplateFormatVersion: "2010-09-09"
Description: Create a Docker CI/CD pipeline with CodePipeline, CodeBuild and ECR
Parameters:

  # TopicName:
  #   Type: String
  #   Description: Environment Name (injected by Stackery at deployment time)

  # FunctionName:
  #   Type: String
  #   Description: Environment Name (injected by Stackery at deployment time)

  # FunctionDescription:
  #   Type: String
  #   Description: Environment Name (injected by Stackery at deployment time)

  # FunctionHandler:
  #   Type: String
  #   Description: Environment Name (injected by Stackery at deployment time)

  # FunctionMemorySize:
  #   Type: Number
  #   Description: the value of the memory size you want to use for this lambda.
  #   Default: 128
  #   AllowedValues:
  #     - 128
  #     - 640
  #     - 1280
  #     - 1792
  #     - 2048

  # FunctionRuntimeVersion:
  #   Type: String
  #   Description: Version Of Node Js
  #   AllowedValues: 
  #     - nodejs8.10
  #     - nodejs10.x

  # FunctionTimeout:
  #   Type: Number
  #   Description: the value of the timeout you want to give to this lambda.
  #   Default: 3

  ServiceTag:
    Type: String
    Description: Environment Name (injected by Stackery at deployment time)

  ApplicationTag:
    Type: String
    Description: Environment Name (injected by Stackery at deployment time)

  PathRole:
    Type: String
    Description: Environment Name (injected by Stackery at deployment time)

  DynamoDbTableName:
    Type: String
    Description: Environment Name (injected by Stackery at deployment time)

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "General Settings"
        Parameters:
          - PathRole
          - ServiceTag
          - ApplicationTag
          # - TopicName
      # - Label:
      #     default: "Lambda Settings"
      #   Parameters:
      #     - FunctionName
      #     - FunctionDescription
      #     - FunctionHandler
      #     - FunctionMemorySize
      #     - FunctionRuntimeVersion
      #     - FunctionTimeout
      - Label:
          default: "DynamoDB Settings"
        Parameters:
          - DynamoDbTableName
Resources:

  DynamoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: UserId
          AttributeType: S
        - AttributeName: Type
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: UserId
          KeyType: HASH
        - AttributeName: Type
          KeyType: RANGE
      # StreamSpecification:
      #   StreamViewType: NEW_AND_OLD_IMAGES
      TableName: !Ref DynamoDbTableName
      # TimeToLiveSpecification:
      #   AttributeName: Archived_At
      #   Enabled: true

  # DynamoDBStreamProcessor: 
  #   Type: AWS::Lambda::Function
  #   Properties: 
  #     FunctionName: !Ref FunctionName
  #     Code: ../../src/MonetizeService/DynamoDBStreamProcessor/build
  #     Description: !Ref FunctionDescription
  #     Handler: !Ref FunctionHandler
  #     MemorySize: !Ref FunctionMemorySize
  #     Role: !GetAtt FunctionIAMRole.Arn
  #     Runtime: !Ref FunctionRuntimeVersion
  #     Timeout: !Ref FunctionTimeout
  #     DeadLetterConfig : 
  #       TargetArn: !GetAtt DynamoDBStreamDeadletterQueue.Arn
  #     Environment: 
  #         Variables: 
  #           SNS_TOPIC_ARN: !Ref Topic
  #     Tags: 
  #       - Key: Service
  #         Value: !Ref ServiceTag
  #       - Key: Application
  #         Value: !Ref ApplicationTag
  #       - Key: Resource
  #         Value: SNS publisher for Update Topic
  
  # FunctionVersionV5:
  #   Type: AWS::Lambda::Version
  #   Properties:
  #     FunctionName: !Ref DynamoDBStreamProcessor
  #     Description : first commit.

  # FunctionAlias:
  #   Type: AWS::Lambda::Alias
  #   Properties:
  #     FunctionVersion: !GetAtt FunctionVersionV5.Version
  #     FunctionName: !Ref DynamoDBStreamProcessor
  #     Name: !Sub ${FunctionName}-V1
      
  # FunctionIAMRole: 
  #   Type: AWS::IAM::Role
  #   Properties: 
  #     AssumeRolePolicyDocument: 
  #       Version: "2012-10-17"
  #       Statement: 
  #         - Effect: Allow
  #           Principal: 
  #             Service: 
  #             - lambda.amazonaws.com
  #           Action: sts:AssumeRole
  #     Policies: 
  #       - PolicyName: !Sub ${ServiceTag}-lambdaSNSPublish-policy
  #         PolicyDocument: 
  #           Version: "2012-10-17"
  #           Statement: 
  #             - Effect: Allow
  #               Action: 
  #                 - logs:*
  #               Resource: !Sub arn:aws:logs:${AWS::Region}:*:log-group:/aws/lambda/*:*:*
  #             - Effect: Allow
  #               Action: 
  #                 - logs:CreateLogGroup
  #                 - logs:CreateLogStream
  #                 - logs:PutLogEvents 
  #               Resource: "*"
  #             - Effect: Allow
  #               Action: 
  #                 - sns:Publish
  #               Resource: !Ref Topic
  #             - Effect: Allow #allow lambda to read from the event stream
  #               Action:
  #               - dynamodb:DescribeStream
  #               - dynamodb:GetRecords
  #               - dynamodb:GetShardIterator
  #               - dynamodb:ListStreams
  #               Resource: !GetAtt DynamoTable.StreamArn
  #             - Effect: Allow
  #               Action: 
  #                 - sqs:ReceiveMessage
  #                 - sqs:DeleteMessage
  #                 - sqs:SendMessage
  #                 - sqs:GetQueueAttributes
  #                 - logs:CreateLogGroup
  #                 - logs:CreateLogStream
  #                 - logs:PutLogEvents
  #               Resource: !GetAtt DynamoTable.StreamArn
  #             - Effect: Allow
  #               Action: 
  #                 - sqs:ReceiveMessage
  #                 - sqs:DeleteMessage
  #                 - sqs:SendMessage
  #                 - sqs:GetQueueAttributes
  #                 - logs:CreateLogGroup
  #                 - logs:CreateLogStream
  #                 - logs:PutLogEvents
  #               Resource: !GetAtt DynamoDBStreamDeadletterQueue.Arn
  #     Path: !Ref PathRole
  #     RoleName: !Sub ${ServiceTag}-${FunctionName}-role

  # DataTableStream:
  #   Type: AWS::Lambda::EventSourceMapping
  #   Properties:
  #     BatchSize: 1 #trigger one lambda per document
  #     Enabled: True
  #     EventSourceArn: !GetAtt DynamoTable.StreamArn
  #     FunctionName: !Ref FunctionAlias
  #     StartingPosition: TRIM_HORIZON

  # Topic:
  #   Type: AWS::SNS::Topic
  #   Properties: 
  #     DisplayName: !Ref TopicName

  # DynamoDBStreamDeadletterQueue:
  #   Type: AWS::SQS::Queue
  #   Properties:
  #     QueueName: DynamoDBStreamDeadletterQueue
  #     DelaySeconds: 20
  #     MaximumMessageSize: 262144
  #     MessageRetentionPeriod: 345600
  #     ReceiveMessageWaitTimeSeconds: 20
  #     VisibilityTimeout: 30
  #     Tags:
  #       - Key: Application
  #         Value: Textras
  #       - Key: Service
  #         Value: Monetize Service
  #       - Key: Queue Name
  #         Value: DynamoDBStreamDeadletterQueue
Outputs:
  # TopicName:
  #   Value: !GetAtt Topic.TopicName
  #   Description: Topic Name.

  # TopicArn:
  #   Value: !Ref Topic
  #   Description: Topic Arn.

  DynamoDbTableName: 
    Value: !Ref DynamoTable
    Description: Domain name S3 bucket

  DynamoDbTableARN: 
    Value: !GetAtt DynamoTable.Arn
    Description: Domain name S3 bucket